{"version":3,"file":"index.js","sources":["../../src/http/HttpError.js","../../src/http/Types.js","../../src/http/queue.js","../../src/http/request.js","../../src/http/index.js"],"sourcesContent":["/**\n * HTTP 请求错误信息集合\n */\nconst HttpError = {\n    default: '网络走神了,请稍后再试',\n    repeat: '请求频率过快',\n    cancel: '请求已取消',\n    network: '网络异常或服务器连接失败',\n    aborted: '请求被中止',\n    timeout: '请求服务器响应超时，请求已经被中断',\n\n    // 3xx: 重定向，需要进一步的操作以完成请求\n    301: '请求的资源已被永久的移动到新URI',\n    302: '请求的资源临时被移动，请重新发送请求',\n    303: '请求的资源已被永久的移动到新URI，使用GET和POST请求查看',\n    304: '所请求资源未变动，已使用本地缓存资源进行访问',\n    305: '所请求的资源必须通过代理访问',\n    306: '请求的资源已被移动',\n    307: '请求的资源临时被移动，使用GET请求重定向',\n\n    // 4xx: 客户端错误\n    400: '客户端请求发生语法错误，服务器无法处理该请求',\n    401: '被请求的页面需要进行身份验证',\n    402: '未知客户端错误',\n    403: '所请求页面的禁止访问',\n    404: 'Not Found，所请求地址不存在',\n    405: '请求中指定的方法被禁止使用',\n\n    406: '服务器无法根据客户端请求的内容特性完成请求',\n    407: '用户必须首先使用代理服务器进行验证并授权',\n    408: '服务器等待客户端发送的请求已超时',\n    409: '由于冲突，请求无法被完成',\n    410: '指定请求的页面已经被移动或不存在',\n\n    411: '服务器无法处理客户端发送的不带 Content-Length 的请求信息',\n    412: '请求失败，请求中前提条件有错误',\n    413: '由于所请求的实体的太大，服务器拒绝处理该请求',\n    414: '请求的URI过长（URI通常为网址），服务器无法处理',\n    415: '服务器无法处理请求附带的媒体格式',\n\n    416: '客户端请求的范围 Range 无效',\n    417: '服务器无法满足 Expect 的请求头信息',\n\n    // 5xx: 服务器错误\n    500: '服务器内部错误，无法完成请求',\n    501: '服务器不支持所请求的功能，无法完成请求',\n    502: '充当网关或代理的服务器，从远端服务器接收到了一个无效的请求',\n    503: '由于超载或系统维护，服务器暂时的无法处理客户端的请求',\n    504: '充当网关或代理的服务器，未及时从远端服务器获取请求',\n    505: '服务器不支持请求中指明的HTTP协议版本'\n};\n\n/**\n * 将新的提示错误描述信息覆盖旧的信息\n * @param {Object} options 新的错误信息配置，如{404:'页面未找到'}\n */\nHttpError.merge = options => {\n    Object.assign(HttpError, options);\n};\n\n/**\n * 根据 HTTP 错误对象分析对应的错误详细内容\n * @param {{request,response:{status}}} error\n * @returns {string}\n */\nHttpError.info = error => {\n    const type = typeof error;\n\n    // err.response.status\n    switch (type) {\n        case 'undefined': {\n            return formatError(HttpError.network);\n        }\n        case 'object': {\n            if (error.response && error.response.status && HttpError[error.response.status]) {\n                return formatError(`[${error.response.status}] ${HttpError[error.response.status]}`, 'server');\n            } else if (error instanceof Error) {\n                // 超时\n                if (/^timeout of/i.test(error.message)) {\n                    return formatError(HttpError.timeout, 'timeout');\n                } else if (/^network/i.test(error.message)) {\n                    return formatError(HttpError.network, 'network');\n                } else {\n                    return formatError(error.message);\n                }\n            } else if (/^cancel/i.test(error.toString())) {\n                let name = error['message'];\n                // 如果提供关键字 e.g 'repeat'\n                if (HttpError.hasOwnProperty(name)) {\n                    return formatError(HttpError[name], name);\n                } else {\n                    return formatError(HttpError.cancel);\n                }\n\n            }\n\n            return formatError(HttpError.default);\n        }\n        case 'string': {\n            return formatError(error);\n        }\n        default: {\n            return formatError(HttpError.default);\n        }\n    }\n};\n\nfunction formatError(message, name = 'error') {\n    let result = {\n        message,\n        name,\n        type: 'error'\n    };\n    return result;\n}\n\nexport default HttpError;\n","/*\n \"text\"         response 是包含在 DOMString 对象中的文本。\n \"\"             将 responseType 设为空字符串与设置为\"text\"相同， 是默认类型 （实际上是 DOMString）。\n \"arraybuffer\"  response 是一个包含二进制数据的 JavaScript ArrayBuffer 。\n \"blob\"         response 是一个包含二进制数据的 Blob 对象 。\n \"document\"     response 是一个 HTML Document 或 XML XMLDocument，这取决于接收到的数据的 MIME 类型。请参阅 HTML in XMLHttpRequest 以了解使用 XHR 获取 HTML 内容的更多信息。\n \"json\"         response 是一个 JavaScript 对象。这个对象是通过将接收到的数据类型视为 JSON 解析得到的。（IE10/11不支持）\n */\nconst ResponseType = {\n    text: 'text',\n    json: 'json', // IE10/11 不支持该类型\n    blob: 'blob',\n    document: 'document',\n    arraybuffer: 'arraybuffer'\n};\n\nconst ContentType = {\n    stream: 'application/octet-stream',\n    json: 'application/json',\n    form: 'application/x-www-form-urlencoded',\n    formData: 'multipart/form-data',\n    javascript: 'application/x-javascript'\n};\n\nexport { ResponseType, ContentType };\n","import Qs from 'qs';\n\n// 请求队列\nclass Queue {\n    constructor(options = {}) {\n        this.options = options;\n        this.list = [];\n    }\n\n    // 根据url、method、data、params 生成唯一键值\n    static getQueueUniqueId(config = {}) {\n        let { data = null, params = null, method = '', url = '' } = config;\n        let payload = null;\n        if (['get', 'delete', 'head'].includes(method.toLowerCase())) {\n            payload = params;\n        } else {\n            payload = data;\n        }\n        let res = '';\n        if (typeof payload === 'string') {\n            res = payload;\n        } else {\n            url = Queue.replace(url, payload || {});\n            res = Qs.stringify(payload);\n        }\n        let uniqueKey = `${url}?method=${method}&${res}`;\n        return uniqueKey;\n    }\n\n    static replace(path, options = {}) {\n        let result = path;\n        try {\n            Object.keys(options).forEach(value => {\n                path = path.replace(new RegExp(`{${value}}`, 'img'), options[value]);\n            });\n            result = path;\n        } catch (e) {\n            console.error(e);\n        }\n        return result;\n    }\n\n    cancel(config, message) {\n        if (config) {\n            let target = this.get(config);\n            target && this._cancel(target, message);\n            target && this.dequeue(target);\n        } else {\n            const list = this.list;\n            for (let i = list.length - 1; i >= 0; i--) {\n                const target = list[i];\n                this._cancel(target, message);\n                this.dequeue(target);\n            }\n        }\n    }\n\n    _cancel(target, message) {\n        if (target) {\n            typeof target.cancelToken === 'function' && target.cancelToken(message);\n            target.cancelToken = null;\n        }\n    }\n\n    // 获取目标\n    get(config) {\n        return this.list.filter(item => item.uuid === config.uuid)[0];\n    }\n\n    // 压入队列\n    enqueue(target, message) {\n        let options = this.options;\n        let stopRepeatRequest = typeof target.stopRepeatRequest === 'boolean' ? target.stopRepeatRequest : options.stopRepeatRequest;\n        let result = [];\n        const list = this.list;\n        for (let i = list.length - 1; i >= 0; i--) {\n            const listItem = list[i];\n            // 如果队列里有相同请求则取消\n            if (listItem.id === target.id && stopRepeatRequest) {\n                result.push(listItem);\n            }\n        }\n        list.push(target);\n        // 取消队列\n        result.forEach(item => {\n            this.cancel(item, message);\n        });\n    }\n\n    // 移除目标，不指定则清空队列\n    dequeue(config) {\n        const list = this.list;\n        this.log('准备移除队列', JSON.stringify(this.list));\n        const uuid = config.uuid;\n        for (let i = list.length - 1; i >= 0; i--) {\n            const item = list[i];\n            if (item.uuid === uuid) {\n                this.log('移除队列成功', item.uuid);\n                list.splice(i, 1);\n                break;\n            }\n        }\n\n    }\n\n    log() {\n        if (this.options.debug) {\n            console.log.apply(this, arguments);\n        }\n    }\n\n    error() {\n        if (this.options.debug) {\n            console.error.apply(this, arguments);\n        }\n    }\n\n    warn() {\n        if (this.options.debug) {\n            console.warn.apply(this, arguments);\n        }\n    }\n}\n\nexport default Queue;\n","import axios from 'axios';\nimport qs from 'qs';\nimport HttpError from './HttpError';\nimport {ResponseType, ContentType} from './Types';\nimport Queue from './queue';\n\nconst CancelToken = axios.CancelToken;\n\nfunction guid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0,\n            v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n\n/**\n * 基于 axios 的 RESTful HTTP 简单封装\n * @module libs/http\n */\nclass HTTP {\n    /**\n     * 默认配置 参数请参阅`axios` http://www.axios-js.com/zh-cn/docs/\n     * @type {AxiosRequestConfig}\n     */\n    static Default = {\n        baseURL: '', // 接口基础地址\n        timeout: 15000, // 超时时间 默认15000\n        responseType: ResponseType.json, // 默认响应数据类型\n        withCredentials: false, // 当前请求为跨域类型时是否在请求中协带cookie\n        headers: {'Content-Type': ContentType.json}, // 默认请求数据类型\n        paramsSerializer: function (params) {\n            return qs.stringify(params, {arrayFormat: 'repeat'});\n        }\n    };\n    // --------------------------------------------------------------------------\n    //\n    // Class constructor\n    //\n    // --------------------------------------------------------------------------\n\n    /**\n     * 构建 API 通信模块实例\n     * @param {Object} [options]\n     */\n    constructor(options = {}) {\n        let {\n            api,\n            debug,\n            isTrim,\n            getResponseSuccess,\n            stopRepeatRequest,\n            repeatInterval,\n            HttpError,\n            beforeRequest,\n            afterRequest,\n            handleRequest,\n            handleError,\n            handleSuccess,\n            setHeaders,\n            getHeaders,\n            ...AxiosRequestConfig\n        } = options;\n        let MyRequestConfig = {\n            debug,\n            isTrim,\n            getResponseSuccess,\n            stopRepeatRequest,\n            repeatInterval,\n            HttpError,\n            beforeRequest,\n            afterRequest,\n            handleRequest,\n            handleError,\n            handleSuccess,\n            setHeaders,\n            getHeaders\n        };\n        Object.keys(MyRequestConfig).forEach(name => {\n            if (MyRequestConfig[name] !== undefined) {\n                this[name] = MyRequestConfig[name]\n            }\n        });\n        this._conf = Object.assign({}, HTTP.Default, AxiosRequestConfig);\n        this._api = this.formatAPI(api);\n        this._init();\n    }\n\n    _init() {\n        const HttpError = this.HttpError;\n        // 创建实例成员（不影响全局使用）\n        this._axios = axios.create(this._conf);\n        this._axios.interceptors.request.use(\n            config => {\n                this.log('[interceptors.request.config]', config);\n                // 全局函数 handleRequest\n                this.handleRequest && this.handleRequest(config);\n                // 全局函数 setHeaders\n                const headers = this.setHeaders && this.setHeaders(config);\n                const payload = config.data || config.params || {};\n                // todo 数据中包含$timeout则设置超时时间 兼容老版本\n                const timeout = payload.$timeout;\n                if (headers) {\n                    config.headers = Object.assign(config.headers, headers || {});\n                }\n                if (timeout) {\n                    config.timeout = timeout;\n                }\n                config.uuid = guid();\n                // 创建取消函数\n                config.cancelToken = new CancelToken(c => {\n                    const id = Queue.getQueueUniqueId(config);\n                    const item = {\n                        stopRepeatRequest: config.stopRepeatRequest,\n                        uuid: config.uuid,\n                        id,\n                        cancelToken: c\n                    };\n                    this.log('enqueue', item);\n                    this._queue.enqueue(item, 'repeat');\n                });\n                return config;\n            },\n            error => {\n                this.error('interceptors.request.error', error.message, error);\n                Promise.reject(error);\n            }\n        );\n\n        this._axios.interceptors.response.use(\n            response => {\n                let repeatInterval = response.config.repeatInterval || this.repeatInterval;\n                // 将请求移除队列\n                setTimeout(() => {\n                    this._queue.dequeue(response.config);\n                }, repeatInterval);\n\n                return this._responseHandler(response);\n            },\n            error => {\n                this.error('interceptors.response.error', error.message, error.config);\n                // 将请求移除队列\n                error && error.response && this._queue.dequeue(error.response.config);\n\n                const errInfo = HttpError.info(error);\n                return Promise.reject(errInfo);\n            }\n        );\n        // 实例化队列\n        this._queue = new Queue({\n            debug: this.debug,\n            HttpError: HttpError,\n            stopRepeatRequest: this.stopRepeatRequest\n        });\n    }\n\n    // --------------------------------------------------------------------------\n    //\n    // Class properties\n    //\n    // --------------------------------------------------------------------------\n    /**\n     * 配置信息\n     * @type {AxiosRequestConfig}\n     * @private\n     */\n    _conf = null;\n\n    /**\n     * 创建实例，不影响全局使用\n     * @type {AxiosInstance}\n     * @private\n     */\n    _axios = null;\n\n    /**\n     * 快捷的API函数\n     * @type {Object}\n     * @private\n     */\n    _api = [];\n\n    /**\n     * 是否对请求数据去空格\n     * @type {boolean}\n     */\n    isTrim = true;\n    /**\n     * 是否允许重复请求\n     * @type {boolean}\n     */\n    stopRepeatRequest = false;\n    /**\n     * 重复请求时间间隔\n     * @type {number}\n     */\n    repeatInterval = 2000;\n    /**\n     * 是否打印调试信息\n     * @type {boolean}\n     * @private\n     */\n    debug = false;\n    /**\n     * 错误的对照map\n     * @type {Object}\n     * @private\n     */\n    HttpError = HttpError;\n\n    // --------------------------------------------------------------------------\n    //\n    // Class methods\n    //\n    // --------------------------------------------------------------------------\n\n    /**\n     * 对象转 URL\n     * @param {Object} obj 待转化对象\n     * @return {string}\n     */\n    toURL(obj) {\n        if (!obj || !Object.keys(obj).length) {\n            return '';\n        }\n\n        return (\n            '?' +\n            Object.keys(obj)\n                .map(key => `${key}=${encodeURIComponent(obj[key])}`)\n                .join('&')\n        );\n    }\n\n    /**\n     * 路劲参数替换\n     * @param {Object} options={} 路劲参数列表\n     */\n    replace(path, options = {}) {\n        Object.keys(options).forEach(value => {\n            path = path.replace(new RegExp(`{${value}}`, 'img'), options[value]);\n        });\n        return path;\n    }\n\n    /**\n     * 请求前回调\n     */\n    beforeRequest() {\n    }\n\n    /**\n     * 请求结果回调\n     */\n    afterRequest() {\n    }\n\n    /**\n     * 请求中回调\n     */\n    handleRequest() {\n    }\n\n    /**\n     * 请求错误回调\n     */\n    handleError(json) {\n        // return Promise.reject(json);\n    }\n\n    /**\n     * 请求成功回调\n     */\n    handleSuccess(json) {\n        return Promise.resolve(json);\n    }\n\n    /**\n     * 请求成功条件\n     */\n    getResponseSuccess(json) {\n        return true;\n    }\n\n    /**\n     * 设置请求头\n     */\n    setHeaders() {\n    }\n\n    /**\n     * 获取请求头\n     */\n    getHeaders() {\n    }\n\n    /**\n     * 取消所有请求（message 参数是可选的）\n     * @param {String} [message] 做为请求失败时的返回信息\n     */\n    cancel() {\n        this.log('取消队列', this._queue.list.length);\n        this._queue.cancel(null, 'cancel');\n    }\n\n    /**\n     * 统一API格式 [{ name, path, method, meta }]\n     * @param {Object} [api]\n     */\n    formatAPI(source) {\n        let result = [];\n        let map = {};\n        if (Array.isArray(source)) {\n            source.forEach(item => {\n                const {name = '', path = '', method = 'get', ...meta} = item;\n                let api = {\n                    name,\n                    path,\n                    method,\n                    meta: {\n                        ...meta\n                    }\n                };\n                if (!api.name || !api.path) {\n                    throw new Error('缺少name, path');\n                }\n                if (!map[api.name]) {\n                    map[api.name] = 1;\n                } else {\n                    throw new Error('存在相同的name');\n                }\n                result.push(api)\n            });\n        } else if (Object.prototype.toString.call(source) === '[object Object]') {\n            Object.keys(source).forEach(name => {\n                let detail = source[name];\n                let target = typeof detail === 'string' ? [detail] : detail;\n                let path = target[0];\n                let meta = {...target[1]};\n                let method = meta.method || meta.methods || 'get';\n                let api = {\n                    name,\n                    path,\n                    method,\n                    meta: {\n                        ...meta\n                    }\n                };\n                if (!api.name || !api.path) {\n                    throw new Error('缺少name, path');\n                }\n                result.push(api);\n            });\n        }\n        console.log('api', result);\n        return result;\n    }\n\n    /**\n     * 创建API\n     * @param {Array}\n     * @return {Object}\n     */\n    toAPI(Urls) {\n        let list = this.formatAPI(Urls);\n        const $api = {};\n        const self = this;\n        list.forEach(api => {\n            const {path, name, method = 'get', meta = {}} = api;\n            $api[name] = function (payload = {}, config = {}) {\n                let options = {...meta, ...config};\n                return self[method](path, payload, options);\n            };\n        });\n        return $api;\n    }\n\n    // 去除数据中的空格\n    trimData(target) {\n        if (target) {\n            for (let key in target) {\n                if (target.hasOwnProperty(key) && typeof target[key] === 'string') {\n                    target[key] = target[key].replace(/^\\s+|\\s+$/gm, '');\n                }\n            }\n        }\n        return target;\n\n    }\n\n    /**\n     * 请求\n     * @param {Object} [config={}] axios配置项以及自定义配置项\n     * @return {Promise}\n     */\n    request(config = {}) {\n        let methods = ['GET', 'HEAD', 'DELETE'];\n        let _api = this._api || [];\n        let isTrim = this.isTrim;\n        let {url = '', payload = null, method = 'GET', params = null, data = null, ...$meta} = config;\n        let target = _api.filter(item => item.name === url)[0];\n        let path = target ? target.path : url;\n        let meta = target ? Object.assign({}, $meta, target.meta || {}) : $meta;\n        let options = {...meta};\n        payload = payload || data || params || {};\n        method = target ? target.method || 'GET' : method;\n        if (methods.includes(method.toUpperCase())) {\n            options.params = payload;\n        } else {\n            options.data = payload;\n        }\n        url = this.replace(path, payload);\n        isTrim && this.trimData(options.params);\n        isTrim && this.trimData(options.data);\n        options.url = url;\n        options.method = method;\n        this.log('request原装参数', JSON.stringify(config));\n        this.log('request最终参数', JSON.stringify(options));\n        return new Promise((resolve, reject) => {\n            this.beforeRequest({url, path, payload, meta});\n            this._axios\n                .request(options)\n                .then(body => {\n                    this.afterRequest({url, path, payload, meta, body});\n                    resolve(body);\n                })\n                .catch(body => {\n                    this.afterRequest({url, path, payload, meta, body});\n                    reject(body);\n                });\n        }).then(body => {\n            // 全局成功回调\n            this.handleSuccess({body, path, url, payload, meta});\n            return body;\n        }).catch(body => {\n            // 全局失败回调 人工cancel不作为错误处理\n            if (body.name !== 'cancel') {\n                this.handleError({body, path, url, payload, meta});\n            }\n            return Promise.reject(body);\n        });\n    }\n\n    get(url, params = [], config = {}) {\n        return this.request({method: 'GET', url, params, ...config});\n    }\n\n    head(url, params = [], config = {}) {\n        return this.request({method: 'HEAD', url, params, ...config});\n    }\n\n    post(url, data = null, config = {}) {\n        return this.request({method: 'POST', url, data, ...config});\n    }\n\n    put(url, data = null, config = {}) {\n        return this.request({method: 'PUT', url, data, ...config});\n    }\n\n    patch(url, data = null, config = {}) {\n        return this.request({method: 'PATCH', url, data, ...config});\n    }\n\n    delete(url, params = null, config = {}) {\n        return this.request({method: 'DELETE', url, params, ...config});\n    }\n\n    // 请求并直接解析下载流文件\n    download(url, payload = null, config = {}) {\n        config.responseType = ResponseType.arraybuffer; // 因为有可能返回json错误\n        return this.request({url, payload, ...config}).then(response => {\n            if (response.headers) {\n                let filename = response.headers['x-suggested-filename'];\n\n                if (!filename) {\n                    const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n                    const matches = filenameRegex.exec(response.headers['content-disposition']);\n                    if (matches != null && matches[1]) {\n                        filename = matches[1].replace(/['\"]/g, '');\n                    }\n                }\n\n                if (filename) {\n                    const url = window.URL.createObjectURL(new Blob([response.data]));\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.setAttribute('download', decodeURIComponent(filename));\n                    link.click();\n                    window.URL.revokeObjectURL(url);\n\n                    return {message: '下载成功'};\n                } else {\n                    return Promise.reject({name: 'download', message: '文件内容已损坏'});\n                }\n            } else {\n                // 返回json\n                return response;\n            }\n        });\n    }\n\n    /**\n     *  结果处理\n     */\n    _responseHandler(response) {\n        // 全局\n        this.getHeaders && this.getHeaders(response);\n        // 如果是流文件直接返回成功\n        if (response.config.responseType === 'blob') {\n            return Promise.resolve(response);\n        }\n        // 数据结果根据`content-type`来操作json数据以及文件流\n        if (response.config.responseType === 'arraybuffer') {\n            const headers = response.headers || {};\n            const contentType = headers['content-type'] || '';\n            const isJSON = contentType.indexOf('application/json') > -1;\n            if (isJSON) {\n                try {\n                    const result = JSON.parse(Buffer.from(response.data).toString('utf8'));\n                    if (this.getResponseSuccess(result)) {\n                        return Promise.resolve(result);\n                    } else {\n                        return Promise.reject(result);\n                    }\n                } catch (e) {\n                    return Promise.reject(e);\n                }\n            } else {\n                // 流\n                return Promise.resolve(response);\n            }\n        }\n        // 正常json数据\n        if (this.getResponseSuccess(response.data)) {\n            return Promise.resolve(response.data);\n        } else {\n            return Promise.reject(response.data);\n        }\n    }\n\n    // --------------------------------------------------------------------------\n    //\n    // Interceptor methods\n    //\n    // --------------------------------------------------------------------------\n\n    /**\n     * 批量注册拦截器\n     * @param {InterceptorConfig[]} interceptors\n     */\n    batchUseInterceptor(interceptors) {\n        interceptors.forEach(item => {\n            const {type, interceptor, error} = item;\n            this.useInterceptor(type, interceptor, error);\n        });\n    }\n\n    /**\n     * 注册拦截器\n     * @param {String} type 注册类型（request / response）\n     * @param {Function} fulfilled 处理函数（具体使用方法请参考 Axios 官方文档）\n     * @param {Function} [rejected] 错误捕获处理函数\n     * @return {Number} id 返回供注销时使用的唯一 id\n     */\n    useInterceptor(type, fulfilled, rejected = null) {\n        const target = this._axios.interceptors[type];\n        return target.use(fulfilled, rejected);\n    }\n\n    /**\n     * 移除所有指定类型的拦截器\n     * @param {String} type 注册类型（request / response）\n     * @param {Number} [id] 移除指定的拦截器，未指定则移除全部拦截器\n     */\n    ejectInterceptor(type, id) {\n        const target = this._axios.interceptors[type];\n        const handlers = target['handlers'];\n\n        // 通过 eject 方法注销拦截器，因其设计时用数组下标做为标记，不能打乱其排列顺序\n        if (id instanceof Number && id < handlers.length) {\n            target.eject(id);\n        } else {\n            handlers.forEach((interceptor, index) => {\n                target.eject(index);\n            });\n        }\n    }\n\n    log() {\n        if (this.debug) {\n            console.log.apply(this, arguments);\n        }\n    }\n\n    error() {\n        if (this.debug) {\n            console.error.apply(this, arguments);\n        }\n    }\n\n    warn() {\n        if (this.debug) {\n            console.warn.apply(this, arguments);\n        }\n    }\n}\n\nexport default HTTP;\n","import Request from './request';\nimport HttpError from './HttpError';\nimport { ResponseType, ContentType } from './Types';\n\n// 做为 Vue Plugin\nfunction install(Vue, config) {\n    Vue.http = new Request(config);\n}\n\nexport {\n    install,\n    Request,\n    HttpError,\n    ResponseType,\n    ContentType\n};\n"],"names":["HttpError","default","repeat","cancel","network","aborted","timeout","formatError","message","name","type","merge","options","Object","assign","info","error","response","status","Error","test","toString","hasOwnProperty","ResponseType","text","json","blob","document","arraybuffer","ContentType","stream","form","formData","javascript","Queue","list","config","target","this","get","_cancel","dequeue","i","length","cancelToken","filter","item","uuid","stopRepeatRequest","result","listItem","id","push","forEach","_this","log","JSON","stringify","splice","debug","console","apply","arguments","warn","data","params","method","url","payload","res","includes","toLowerCase","replace","Qs","path","keys","value","RegExp","e","CancelToken","axios","guid","c","r","Math","random","HTTP","api","isTrim","getResponseSuccess","repeatInterval","beforeRequest","afterRequest","handleRequest","handleError","handleSuccess","setHeaders","getHeaders","AxiosRequestConfig","MyRequestConfig","undefined","_conf","Default","_api","formatAPI","_init","_axios","create","interceptors","request","use","_this2","headers","$timeout","getQueueUniqueId","_queue","enqueue","Promise","reject","setTimeout","_responseHandler","errInfo","obj","map","key","encodeURIComponent","join","resolve","source","Array","isArray","meta","prototype","call","detail","methods","Urls","$api","self","$meta","toUpperCase","trimData","_this3","then","body","catch","responseType","filename","matches","exec","window","URL","createObjectURL","Blob","link","createElement","href","setAttribute","decodeURIComponent","click","revokeObjectURL","indexOf","parse","Buffer","from","interceptor","_this4","useInterceptor","fulfilled","rejected","handlers","Number","eject","index","install","Vue","http","Request","baseURL","withCredentials","paramsSerializer","qs","arrayFormat"],"mappings":"+gEAGA,IAAMA,UAAY,CACdC,QAAS,cACTC,OAAQ,SACRC,OAAQ,QACRC,QAAS,eACTC,QAAS,QACTC,QAAS,wBAGJ,wBACA,yBACA,uCACA,6BACA,qBACA,gBACA,4BAGA,6BACA,qBACA,cACA,iBACA,yBACA,oBAEA,4BACA,2BACA,uBACA,mBACA,uBAEA,2CACA,sBACA,6BACA,iCACA,uBAEA,wBACA,4BAGA,qBACA,0BACA,oCACA,iCACA,gCACA,wBA0DT,SAASC,YAAYC,SACJ,CACTA,QAAAA,EACAC,4DAH6B,QAI7BC,KAAM,SAvDdV,UAAUW,MAAQ,SAAAC,GACdC,OAAOC,OAAOd,UAAWY,IAQ7BZ,UAAUe,KAAO,SAAAC,kBACOA,QAIX,mBACMT,YAAYP,UAAUI,aAE5B,YACGY,EAAMC,UAAYD,EAAMC,SAASC,QAAUlB,UAAUgB,EAAMC,SAASC,eAC7DX,uBAAgBS,EAAMC,SAASC,oBAAWlB,UAAUgB,EAAMC,SAASC,SAAW,UAClF,GAAIF,aAAiBG,YAEpB,eAAeC,KAAKJ,EAAMR,SACnBD,YAAYP,UAAUM,QAAS,WAC/B,YAAYc,KAAKJ,EAAMR,SACvBD,YAAYP,UAAUI,QAAS,WAE/BG,YAAYS,EAAMR,SAE1B,GAAI,WAAWY,KAAKJ,EAAMK,YAAa,KACtCZ,EAAOO,EAAK,eAEZhB,UAAUsB,eAAeb,GAClBF,YAAYP,UAAUS,GAAOA,GAE7BF,YAAYP,UAAUG,eAK9BI,YAAYP,UAAUC,aAE5B,gBACMM,YAAYS,kBAGZT,YAAYP,UAAUC,WC9FzC,IAAMsB,aAAe,CACjBC,KAAM,OACNC,KAAM,OACNC,KAAM,OACNC,SAAU,WACVC,YAAa,eAGXC,YAAc,CAChBC,OAAQ,2BACRL,KAAM,mBACNM,KAAM,oCACNC,SAAU,sBACVC,WAAY,4BClBVC,kCACUtB,yDAAU,gCACbA,QAAUA,OACVuB,KAAO,uDAoCTC,EAAQ5B,MACP4B,EAAQ,KACJC,EAASC,KAAKC,IAAIH,GACtBC,GAAUC,KAAKE,QAAQH,EAAQ7B,GAC/B6B,GAAUC,KAAKG,QAAQJ,gBAEjBF,EAAOG,KAAKH,KACTO,EAAIP,EAAKQ,OAAS,EAAQ,GAALD,EAAQA,IAAK,KACjCL,EAASF,EAAKO,QACfF,QAAQH,EAAQ7B,QAChBiC,QAAQJ,oCAKjBA,EAAQ7B,GACR6B,IAC8B,mBAAvBA,EAAOO,aAA8BP,EAAOO,YAAYpC,GAC/D6B,EAAOO,YAAc,kCAKzBR,UACOE,KAAKH,KAAKU,OAAO,SAAAC,UAAQA,EAAKC,OAASX,EAAOW,OAAM,mCAIvDV,EAAQ7B,kBACRI,EAAU0B,KAAK1B,QACfoC,EAAwD,kBAA7BX,EAAOW,kBAAkCX,EAAOW,kBAAoBpC,EAAQoC,kBACvGC,EAAS,GACPd,EAAOG,KAAKH,KACTO,EAAIP,EAAKQ,OAAS,EAAQ,GAALD,EAAQA,IAAK,KACjCQ,EAAWf,EAAKO,GAElBQ,EAASC,KAAOd,EAAOc,IAAMH,GAC7BC,EAAOG,KAAKF,GAGpBf,EAAKiB,KAAKf,GAEVY,EAAOI,QAAQ,SAAAP,GACXQ,EAAKnD,OAAO2C,EAAMtC,qCAKlB4B,OACED,EAAOG,KAAKH,UACboB,IAAI,SAAUC,KAAKC,UAAUnB,KAAKH,eACjCY,EAAOX,EAAOW,KACXL,EAAIP,EAAKQ,OAAS,EAAQ,GAALD,EAAQA,IAAK,KACjCI,EAAOX,EAAKO,MACdI,EAAKC,OAASA,EAAM,MACfQ,IAAI,SAAUT,EAAKC,MACxBZ,EAAKuB,OAAOhB,EAAG,yCAQnBJ,KAAK1B,QAAQ+C,OACbC,QAAQL,IAAIM,MAAMvB,KAAMwB,2CAKxBxB,KAAK1B,QAAQ+C,OACbC,QAAQ5C,MAAM6C,MAAMvB,KAAMwB,0CAK1BxB,KAAK1B,QAAQ+C,OACbC,QAAQG,KAAKF,MAAMvB,KAAMwB,6DA7GT1B,mCAAS,KAC+BA,EAAtD4B,KAAAA,aAAO,SAA+C5B,EAAzC6B,OAAAA,aAAS,SAAgC7B,EAA1B8B,OAAAA,aAAS,OAAiB9B,EAAb+B,IAAAA,aAAM,KACjDC,EAAU,KAMVC,EAAM,UAENA,EADmB,iBALnBD,EADA,CAAC,MAAO,SAAU,QAAQE,SAASJ,EAAOK,eAChCN,EAEAD,GAIJI,GAEND,EAAMjC,EAAMsC,QAAQL,EAAKC,GAAW,IAC9BK,GAAGhB,UAAUW,cAEJD,qBAAcD,cAAUG,mCAIhCK,SAAM9D,mCAAU,GACvBqC,EAASyB,MAET7D,OAAO8D,KAAK/D,GAASyC,QAAQ,SAAAuB,GACzBF,EAAOA,EAAKF,QAAQ,IAAIK,kBAAWD,OAAU,OAAQhE,EAAQgE,MAEjE3B,EAASyB,EACX,MAAOI,GACLlB,QAAQ5C,MAAM8D,UAEX7B,WCjCT8B,YAAcC,MAAMD,YAE1B,SAASE,aACE,uCAAuCT,QAAQ,QAAS,SAAUU,OACjEC,EAAqB,GAAhBC,KAAKC,SAAiB,SACjB,MAANH,EAAYC,EAAS,EAAJA,EAAW,GAC3B9D,SAAS,UAQpBiE,wCAyBU1E,yDAAU,wDAyHd,oCAOC,kCAOF,mCAME,6CAKW,yCAKH,mCAMT,oCAMIZ,eAjKJuF,EAeA3E,EAfA2E,IACA5B,EAcA/C,EAdA+C,MACA6B,EAaA5E,EAbA4E,OACAC,EAYA7E,EAZA6E,mBACAzC,EAWApC,EAXAoC,kBACA0C,EAUA9E,EAVA8E,eACA1F,EASAY,EATAZ,UACA2F,EAQA/E,EARA+E,cACAC,EAOAhF,EAPAgF,aACAC,EAMAjF,EANAiF,cACAC,EAKAlF,EALAkF,YACAC,EAIAnF,EAJAmF,cACAC,EAGApF,EAHAoF,WACAC,EAEArF,EAFAqF,WACGC,2BACHtF,yMACAuF,EAAkB,CAClBxC,MAAAA,EACA6B,OAAAA,EACAC,mBAAAA,EACAzC,kBAAAA,EACA0C,eAAAA,EACA1F,UAAAA,EACA2F,cAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,WAAAA,EACAC,WAAAA,GAEJpF,OAAO8D,KAAKwB,GAAiB9C,QAAQ,SAAA5C,QACH2F,IAA1BD,EAAgB1F,KAChB6C,EAAK7C,GAAQ0F,EAAgB1F,WAGhC4F,MAAQxF,OAAOC,OAAO,GAAIwE,EAAKgB,QAASJ,QACxCK,KAAOjE,KAAKkE,UAAUjB,QACtBkB,wEAICzG,EAAYsC,KAAKtC,eAElB0G,OAAS1B,MAAM2B,OAAOrE,KAAK+D,YAC3BK,OAAOE,aAAaC,QAAQC,IAC7B,SAAA1E,GACI2E,EAAKxD,IAAI,gCAAiCnB,GAE1C2E,EAAKlB,eAAiBkB,EAAKlB,cAAczD,OAEnC4E,EAAUD,EAAKf,YAAce,EAAKf,WAAW5D,GAG7C9B,GAFU8B,EAAO4B,MAAQ5B,EAAO6B,QAAU,IAExBgD,gBACpBD,IACA5E,EAAO4E,QAAUnG,OAAOC,OAAOsB,EAAO4E,QAASA,GAAW,KAE1D1G,IACA8B,EAAO9B,QAAUA,GAErB8B,EAAOW,KAAOkC,OAEd7C,EAAOQ,YAAc,IAAImC,YAAY,SAAAG,OAC3B/B,EAAKjB,MAAMgF,iBAAiB9E,GAC5BU,EAAO,CACTE,kBAAmBZ,EAAOY,kBAC1BD,KAAMX,EAAOW,KACbI,GAAAA,EACAP,YAAasC,GAEjB6B,EAAKxD,IAAI,UAAWT,GACpBiE,EAAKI,OAAOC,QAAQtE,EAAM,YAEvBV,GAEX,SAAApB,GACI+F,EAAK/F,MAAM,6BAA8BA,EAAMR,QAASQ,GACxDqG,QAAQC,OAAOtG,UAIlB0F,OAAOE,aAAa3F,SAAS6F,IAC9B,SAAA7F,OACQyE,EAAiBzE,EAASmB,OAAOsD,gBAAkBqB,EAAKrB,sBAE5D6B,WAAW,WACPR,EAAKI,OAAO1E,QAAQxB,EAASmB,SAC9BsD,GAEIqB,EAAKS,iBAAiBvG,IAEjC,SAAAD,GACI+F,EAAK/F,MAAM,8BAA+BA,EAAMR,QAASQ,EAAMoB,QAE/DpB,GAASA,EAAMC,UAAY8F,EAAKI,OAAO1E,QAAQzB,EAAMC,SAASmB,YAExDqF,EAAUzH,EAAUe,KAAKC,UACxBqG,QAAQC,OAAOG,UAIzBN,OAAS,IAAIjF,MAAM,CACpByB,MAAOrB,KAAKqB,MACZ3D,UAAWA,EACXgD,kBAAmBV,KAAKU,kDAqE1B0E,UACGA,GAAQ7G,OAAO8D,KAAK+C,GAAK/E,OAK1B,IACA9B,OAAO8D,KAAK+C,GACPC,IAAI,SAAAC,mBAAUA,cAAOC,mBAAmBH,EAAIE,OAC5CE,KAAK,KAPH,mCAePpD,SAAM9D,mCAAU,UACpBC,OAAO8D,KAAK/D,GAASyC,QAAQ,SAAAuB,GACzBF,EAAOA,EAAKF,QAAQ,IAAIK,kBAAWD,OAAU,OAAQhE,EAAQgE,MAE1DF,yMA+BGjD,UACH4F,QAAQU,QAAQtG,uDAOhB,oHAoBF8B,IAAI,OAAQjB,KAAK6E,OAAOhF,KAAKQ,aAC7BwE,OAAOhH,OAAO,KAAM,4CAOnB6H,OACF/E,EAAS,GACT0E,EAAM,UACNM,MAAMC,QAAQF,GACdA,EAAO3E,QAAQ,SAAAP,SAC6CA,EAAjDrC,KAAAA,aAAO,OAA0CqC,EAAtC4B,KAAAA,aAAO,OAA+B5B,EAA3BoB,OACzBqB,EAAM,CACN9E,KAAAA,EACAiE,KAAAA,EACAR,kBAJkC,QAKlCiE,gDALoDrF,kCASnDyC,EAAI9E,OAAS8E,EAAIb,WACZ,IAAIvD,MAAM,mBAEfwG,EAAIpC,EAAI9E,YAGH,IAAIU,MAAM,aAFhBwG,EAAIpC,EAAI9E,MAAQ,EAIpBwC,EAAOG,KAAKmC,KAEkC,oBAA3C1E,OAAOuH,UAAU/G,SAASgH,KAAKL,IACtCnH,OAAO8D,KAAKqD,GAAQ3E,QAAQ,SAAA5C,OACpB6H,EAASN,EAAOvH,GAChB4B,EAA2B,iBAAXiG,EAAsB,CAACA,GAAUA,EACjD5D,EAAOrC,EAAO,GACd8F,oBAAW9F,EAAO,IAElBkD,EAAM,CACN9E,KAAAA,EACAiE,KAAAA,EACAR,OAJSiE,EAAKjE,QAAUiE,EAAKI,SAAW,MAKxCJ,uBACOA,QAGN5C,EAAI9E,OAAS8E,EAAIb,WACZ,IAAIvD,MAAM,gBAEpB8B,EAAOG,KAAKmC,KAGpB3B,QAAQL,IAAI,MAAON,GACZA,gCAQLuF,OACErG,EAAOG,KAAKkE,UAAUgC,GACpBC,EAAO,GACPC,EAAOpG,YACbH,EAAKkB,QAAQ,SAAAkC,OACFb,EAAyCa,EAAzCb,KAAMjE,EAAmC8E,EAAnC9E,OAAmC8E,EAA7BrB,OAAAA,aAAS,UAAoBqB,EAAb4C,KAAAA,aAAO,KAC1CM,EAAKhI,GAAQ,eAAU2D,yDAAU,GACzBxD,oBAAcuH,4DADwB,WAEnCO,EAAKxE,GAAQQ,EAAMN,EAASxD,MAGpC6H,mCAIFpG,MACDA,MACK,IAAIuF,KAAOvF,EACRA,EAAOf,eAAesG,IAA+B,iBAAhBvF,EAAOuF,KAC5CvF,EAAOuF,GAAOvF,EAAOuF,GAAKpD,QAAQ,cAAe,YAItDnC,gDASHD,mCAAS,GAETmE,EAAOjE,KAAKiE,MAAQ,GACpBf,EAASlD,KAAKkD,SACqEpD,EAAlF+B,IAAAA,aAAM,OAA4E/B,EAAxEgC,QAAAA,aAAU,SAA8DhC,EAAxD8B,OAAAA,aAAS,UAA+C9B,EAAxC6B,OAAAA,aAAS,SAA+B7B,EAAzB4B,KAAAA,aAAO,OAAS2E,2BAASvG,8CACnFC,EAASkE,EAAK1D,OAAO,SAAAC,UAAQA,EAAKrC,OAAS0D,IAAK,GAChDO,EAAOrC,EAASA,EAAOqC,KAAOP,EAC9BgE,EAAO9F,EAASxB,OAAOC,OAAO,GAAI6H,EAAOtG,EAAO8F,MAAQ,IAAMQ,EAC9D/H,oBAAcuH,UAClB/D,EAAUA,GAAWJ,GAAQC,GAAU,GACvCC,EAAS7B,EAASA,EAAO6B,QAAU,MAAQA,EAT7B,CAAC,MAAO,OAAQ,UAUlBI,SAASJ,EAAO0E,eACxBhI,EAAQqD,OAASG,EAEjBxD,EAAQoD,KAAOI,EAEnBD,EAAM7B,KAAKkC,QAAQE,EAAMN,GACzBoB,GAAUlD,KAAKuG,SAASjI,EAAQqD,QAChCuB,GAAUlD,KAAKuG,SAASjI,EAAQoD,MAChCpD,EAAQuD,IAAMA,EACdvD,EAAQsD,OAASA,OACZX,IAAI,cAAeC,KAAKC,UAAUrB,SAClCmB,IAAI,cAAeC,KAAKC,UAAU7C,IAChC,IAAIyG,QAAQ,SAACU,EAAST,GACzBwB,EAAKnD,cAAc,CAACxB,IAAAA,EAAKO,KAAAA,EAAMN,QAAAA,EAAS+D,KAAAA,IACxCW,EAAKpC,OACAG,QAAQjG,GACRmI,KAAK,SAAAC,GACFF,EAAKlD,aAAa,CAACzB,IAAAA,EAAKO,KAAAA,EAAMN,QAAAA,EAAS+D,KAAAA,EAAMa,KAAAA,IAC7CjB,EAAQiB,KAEXC,MAAM,SAAAD,GACHF,EAAKlD,aAAa,CAACzB,IAAAA,EAAKO,KAAAA,EAAMN,QAAAA,EAAS+D,KAAAA,EAAMa,KAAAA,IAC7C1B,EAAO0B,OAEhBD,KAAK,SAAAC,UAEJF,EAAK/C,cAAc,CAACiD,KAAAA,EAAMtE,KAAAA,EAAMP,IAAAA,EAAKC,QAAAA,EAAS+D,KAAAA,IACvCa,IACRC,MAAM,SAAAD,SAEa,WAAdA,EAAKvI,MACLqI,EAAKhD,YAAY,CAACkD,KAAAA,EAAMtE,KAAAA,EAAMP,IAAAA,EAAKC,QAAAA,EAAS+D,KAAAA,IAEzCd,QAAQC,OAAO0B,iCAI1B7E,WAAKF,mCAAS,GAAI7B,mCAAS,UACpBE,KAAKuE,wBAAS3C,OAAQ,MAAOC,IAAAA,EAAKF,OAAAA,GAAW7B,iCAGnD+B,WAAKF,mCAAS,GAAI7B,mCAAS,UACrBE,KAAKuE,wBAAS3C,OAAQ,OAAQC,IAAAA,EAAKF,OAAAA,GAAW7B,iCAGpD+B,WAAKH,mCAAO,KAAM5B,mCAAS,UACrBE,KAAKuE,wBAAS3C,OAAQ,OAAQC,IAAAA,EAAKH,KAAAA,GAAS5B,gCAGnD+B,WAAKH,mCAAO,KAAM5B,mCAAS,UACpBE,KAAKuE,wBAAS3C,OAAQ,MAAOC,IAAAA,EAAKH,KAAAA,GAAS5B,kCAGhD+B,WAAKH,mCAAO,KAAM5B,mCAAS,UACtBE,KAAKuE,wBAAS3C,OAAQ,QAASC,IAAAA,EAAKH,KAAAA,GAAS5B,mCAGjD+B,WAAKF,mCAAS,KAAM7B,mCAAS,UACzBE,KAAKuE,wBAAS3C,OAAQ,SAAUC,IAAAA,EAAKF,OAAAA,GAAW7B,qCAIlD+B,WAAKC,mCAAU,KAAMhC,mCAAS,UACnCA,EAAO8G,aAAe3H,aAAaK,YAC5BU,KAAKuE,wBAAS1C,IAAAA,EAAKC,QAAAA,GAAYhC,IAAS2G,KAAK,SAAA9H,MAC5CA,EAAS+F,QAAS,KACdmC,EAAWlI,EAAS+F,QAAQ,4BAE3BmC,EAAU,KAELC,EADgB,yCACQC,KAAKpI,EAAS+F,QAAQ,wBACrC,MAAXoC,GAAmBA,EAAQ,KAC3BD,EAAWC,EAAQ,GAAG5E,QAAQ,QAAS,QAI3C2E,EAAU,KACJhF,EAAMmF,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACxI,EAAS+C,QACpD0F,EAAO/H,SAASgI,cAAc,YACpCD,EAAKE,KAAOzF,EACZuF,EAAKG,aAAa,WAAYC,mBAAmBX,IACjDO,EAAKK,QACLT,OAAOC,IAAIS,gBAAgB7F,GAEpB,CAAC3D,QAAS,eAEV6G,QAAQC,OAAO,CAAC7G,KAAM,WAAYD,QAAS,mBAI/CS,6CAQFA,WAERgF,YAAc3D,KAAK2D,WAAWhF,GAEE,SAAjCA,EAASmB,OAAO8G,oBACT7B,QAAQU,QAAQ9G,MAGU,gBAAjCA,EAASmB,OAAO8G,aAAgC,OAGU,IAF1CjI,EAAS+F,SAAW,IACR,iBAAmB,IACpBiD,QAAQ,4BAcxB5C,QAAQU,QAAQ9G,WAXbgC,EAASO,KAAK0G,MAAMC,OAAOC,KAAKnJ,EAAS+C,MAAM3C,SAAS,gBAC1DiB,KAAKmD,mBAAmBxC,GACjBoE,QAAQU,QAAQ9E,GAEhBoE,QAAQC,OAAOrE,GAE5B,MAAO6B,UACEuC,QAAQC,OAAOxC,WAQ9BxC,KAAKmD,mBAAmBxE,EAAS+C,MAC1BqD,QAAQU,QAAQ9G,EAAS+C,MAEzBqD,QAAQC,OAAOrG,EAAS+C,kDAcnB4C,cAChBA,EAAavD,QAAQ,SAAAP,OACVpC,EAA4BoC,EAA5BpC,KAAM2J,EAAsBvH,EAAtBuH,YAAarJ,EAAS8B,EAAT9B,MAC1BsJ,EAAKC,eAAe7J,EAAM2J,EAAarJ,4CAWhCN,EAAM8J,SAAWC,mCAAW,YACxBnI,KAAKoE,OAAOE,aAAalG,GAC1BoG,IAAI0D,EAAWC,4CAQhB/J,EAAMyC,OACbd,EAASC,KAAKoE,OAAOE,aAAalG,GAClCgK,EAAWrI,EAAM,SAGnBc,aAAcwH,QAAUxH,EAAKuH,EAAS/H,OACtCN,EAAOuI,MAAMzH,GAEbuH,EAASrH,QAAQ,SAACgH,EAAaQ,GAC3BxI,EAAOuI,MAAMC,mCAMjBvI,KAAKqB,OACLC,QAAQL,IAAIM,MAAMvB,KAAMwB,2CAKxBxB,KAAKqB,OACLC,QAAQ5C,MAAM6C,MAAMvB,KAAMwB,0CAK1BxB,KAAKqB,OACLC,QAAQG,KAAKF,MAAMvB,KAAMwB,oBCrlBrC,SAASgH,QAAQC,EAAK3I,GAClB2I,EAAIC,KAAO,IAAIC,KAAQ7I,mBDcrBkD,eAKe,CACb4F,QAAS,GACT5K,QAAS,KACT4I,aAAc3H,aAAaE,KAC3B0J,iBAAiB,EACjBnE,QAAS,gBAAiBnF,YAAYJ,MACtC2J,iBAAkB,SAAUnH,UACjBoH,GAAG5H,UAAUQ,EAAQ,CAACqH,YAAa"}